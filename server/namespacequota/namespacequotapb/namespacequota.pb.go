// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: namespacequota.proto

package namespacequotapb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NamespaceQuota struct {
	Key                  string   `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	QuotaByteCount       uint64   `protobuf:"varint,2,opt,name=QuotaByteCount,proto3" json:"QuotaByteCount,omitempty"`
	QuotaKeyCount        uint64   `protobuf:"varint,3,opt,name=QuotaKeyCount,proto3" json:"QuotaKeyCount,omitempty"`
	UsageByteCount       uint64   `protobuf:"varint,4,opt,name=UsageByteCount,proto3" json:"UsageByteCount,omitempty"`
	UsageKeyCount        uint64   `protobuf:"varint,5,opt,name=UsageKeyCount,proto3" json:"UsageKeyCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NamespaceQuota) Reset()         { *m = NamespaceQuota{} }
func (m *NamespaceQuota) String() string { return proto.CompactTextString(m) }
func (*NamespaceQuota) ProtoMessage()    {}
func (*NamespaceQuota) Descriptor() ([]byte, []int) {
	return fileDescriptor_05e9fd882130abf3, []int{0}
}
func (m *NamespaceQuota) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceQuota) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceQuota.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceQuota) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceQuota.Merge(m, src)
}
func (m *NamespaceQuota) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceQuota) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceQuota.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceQuota proto.InternalMessageInfo

func init() {
	proto.RegisterType((*NamespaceQuota)(nil), "namespacequotapb.NamespaceQuota")
}

func init() { proto.RegisterFile("namespacequota.proto", fileDescriptor_05e9fd882130abf3) }

var fileDescriptor_05e9fd882130abf3 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4b, 0xcc, 0x4d,
	0x2d, 0x2e, 0x48, 0x4c, 0x4e, 0x2d, 0x2c, 0xcd, 0x2f, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0x40, 0x15, 0x2d, 0x48, 0x92, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x4b, 0xea, 0x83,
	0x58, 0x10, 0x75, 0x4a, 0xfb, 0x18, 0xb9, 0xf8, 0xfc, 0x60, 0x4a, 0x03, 0x41, 0x4a, 0x85, 0x04,
	0xb8, 0x98, 0xbd, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x21, 0x35,
	0x2e, 0x3e, 0xb0, 0x94, 0x53, 0x65, 0x49, 0xaa, 0x73, 0x7e, 0x69, 0x5e, 0x89, 0x04, 0x93, 0x02,
	0xa3, 0x06, 0x4b, 0x10, 0x9a, 0xa8, 0x90, 0x0a, 0x17, 0x2f, 0x58, 0xc4, 0x3b, 0xb5, 0x12, 0xa2,
	0x8c, 0x19, 0xac, 0x0c, 0x55, 0x10, 0x64, 0x5a, 0x68, 0x71, 0x62, 0x7a, 0x2a, 0xc2, 0x34, 0x16,
	0x88, 0x69, 0xa8, 0xa2, 0x20, 0xd3, 0xc0, 0x22, 0x70, 0xd3, 0x58, 0x21, 0xa6, 0xa1, 0x08, 0x3a,
	0x49, 0x9c, 0x78, 0x28, 0xc7, 0x70, 0xe1, 0xa1, 0x1c, 0xc3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e,
	0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0xd8, 0x87, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90, 0x5b, 0xc1, 0x8a, 0x21, 0x01, 0x00, 0x00,
}

func (m *NamespaceQuota) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceQuota) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceQuota) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UsageKeyCount != 0 {
		i = encodeVarintNamespacequota(dAtA, i, uint64(m.UsageKeyCount))
		i--
		dAtA[i] = 0x28
	}
	if m.UsageByteCount != 0 {
		i = encodeVarintNamespacequota(dAtA, i, uint64(m.UsageByteCount))
		i--
		dAtA[i] = 0x20
	}
	if m.QuotaKeyCount != 0 {
		i = encodeVarintNamespacequota(dAtA, i, uint64(m.QuotaKeyCount))
		i--
		dAtA[i] = 0x18
	}
	if m.QuotaByteCount != 0 {
		i = encodeVarintNamespacequota(dAtA, i, uint64(m.QuotaByteCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintNamespacequota(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNamespacequota(dAtA []byte, offset int, v uint64) int {
	offset -= sovNamespacequota(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NamespaceQuota) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovNamespacequota(uint64(l))
	}
	if m.QuotaByteCount != 0 {
		n += 1 + sovNamespacequota(uint64(m.QuotaByteCount))
	}
	if m.QuotaKeyCount != 0 {
		n += 1 + sovNamespacequota(uint64(m.QuotaKeyCount))
	}
	if m.UsageByteCount != 0 {
		n += 1 + sovNamespacequota(uint64(m.UsageByteCount))
	}
	if m.UsageKeyCount != 0 {
		n += 1 + sovNamespacequota(uint64(m.UsageKeyCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNamespacequota(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNamespacequota(x uint64) (n int) {
	return sovNamespacequota(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NamespaceQuota) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespacequota
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceQuota: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceQuota: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamespacequota
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNamespacequota
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotaByteCount", wireType)
			}
			m.QuotaByteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuotaByteCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotaKeyCount", wireType)
			}
			m.QuotaKeyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuotaKeyCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageByteCount", wireType)
			}
			m.UsageByteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageByteCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageKeyCount", wireType)
			}
			m.UsageKeyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageKeyCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamespacequota(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespacequota
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNamespacequota(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNamespacequota
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNamespacequota
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNamespacequota
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNamespacequota
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNamespacequota        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNamespacequota          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNamespacequota = fmt.Errorf("proto: unexpected end of group")
)
