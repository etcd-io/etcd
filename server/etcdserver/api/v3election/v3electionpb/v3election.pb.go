// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.14.0
// source: v3election.proto

package v3electionpb

import (
	reflect "reflect"
	sync "sync"

	etcdserverpb "go.etcd.io/etcd/api/v3/etcdserverpb"
	mvccpb "go.etcd.io/etcd/api/v3/mvccpb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the election's identifier for the campaign.
	Name []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// lease is the ID of the lease attached to leadership of the election. If the
	// lease expires or is revoked before resigning leadership, then the
	// leadership is transferred to the next campaigner, if any.
	Lease int64 `protobuf:"varint,2,opt,name=lease,proto3" json:"lease,omitempty"`
	// value is the initial proclaimed value set when the campaigner wins the
	// election.
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CampaignRequest) Reset() {
	*x = CampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3election_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignRequest) ProtoMessage() {}

func (x *CampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v3election_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignRequest.ProtoReflect.Descriptor instead.
func (*CampaignRequest) Descriptor() ([]byte, []int) {
	return file_v3election_proto_rawDescGZIP(), []int{0}
}

func (x *CampaignRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CampaignRequest) GetLease() int64 {
	if x != nil {
		return x.Lease
	}
	return 0
}

func (x *CampaignRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type CampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *etcdserverpb.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// leader describes the resources used for holding leadereship of the election.
	Leader *LeaderKey `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
}

func (x *CampaignResponse) Reset() {
	*x = CampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3election_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignResponse) ProtoMessage() {}

func (x *CampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v3election_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignResponse.ProtoReflect.Descriptor instead.
func (*CampaignResponse) Descriptor() ([]byte, []int) {
	return file_v3election_proto_rawDescGZIP(), []int{1}
}

func (x *CampaignResponse) GetHeader() *etcdserverpb.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CampaignResponse) GetLeader() *LeaderKey {
	if x != nil {
		return x.Leader
	}
	return nil
}

type LeaderKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the election identifier that correponds to the leadership key.
	Name []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// key is an opaque key representing the ownership of the election. If the key
	// is deleted, then leadership is lost.
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// rev is the creation revision of the key. It can be used to test for ownership
	// of an election during transactions by testing the key's creation revision
	// matches rev.
	Rev int64 `protobuf:"varint,3,opt,name=rev,proto3" json:"rev,omitempty"`
	// lease is the lease ID of the election leader.
	Lease int64 `protobuf:"varint,4,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *LeaderKey) Reset() {
	*x = LeaderKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3election_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderKey) ProtoMessage() {}

func (x *LeaderKey) ProtoReflect() protoreflect.Message {
	mi := &file_v3election_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderKey.ProtoReflect.Descriptor instead.
func (*LeaderKey) Descriptor() ([]byte, []int) {
	return file_v3election_proto_rawDescGZIP(), []int{2}
}

func (x *LeaderKey) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *LeaderKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *LeaderKey) GetRev() int64 {
	if x != nil {
		return x.Rev
	}
	return 0
}

func (x *LeaderKey) GetLease() int64 {
	if x != nil {
		return x.Lease
	}
	return 0
}

type LeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the election identifier for the leadership information.
	Name []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LeaderRequest) Reset() {
	*x = LeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3election_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderRequest) ProtoMessage() {}

func (x *LeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v3election_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderRequest.ProtoReflect.Descriptor instead.
func (*LeaderRequest) Descriptor() ([]byte, []int) {
	return file_v3election_proto_rawDescGZIP(), []int{3}
}

func (x *LeaderRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

type LeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *etcdserverpb.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// kv is the key-value pair representing the latest leader update.
	Kv *mvccpb.KeyValue `protobuf:"bytes,2,opt,name=kv,proto3" json:"kv,omitempty"`
}

func (x *LeaderResponse) Reset() {
	*x = LeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3election_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderResponse) ProtoMessage() {}

func (x *LeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v3election_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderResponse.ProtoReflect.Descriptor instead.
func (*LeaderResponse) Descriptor() ([]byte, []int) {
	return file_v3election_proto_rawDescGZIP(), []int{4}
}

func (x *LeaderResponse) GetHeader() *etcdserverpb.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LeaderResponse) GetKv() *mvccpb.KeyValue {
	if x != nil {
		return x.Kv
	}
	return nil
}

type ResignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// leader is the leadership to relinquish by resignation.
	Leader *LeaderKey `protobuf:"bytes,1,opt,name=leader,proto3" json:"leader,omitempty"`
}

func (x *ResignRequest) Reset() {
	*x = ResignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3election_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResignRequest) ProtoMessage() {}

func (x *ResignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v3election_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResignRequest.ProtoReflect.Descriptor instead.
func (*ResignRequest) Descriptor() ([]byte, []int) {
	return file_v3election_proto_rawDescGZIP(), []int{5}
}

func (x *ResignRequest) GetLeader() *LeaderKey {
	if x != nil {
		return x.Leader
	}
	return nil
}

type ResignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *etcdserverpb.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ResignResponse) Reset() {
	*x = ResignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3election_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResignResponse) ProtoMessage() {}

func (x *ResignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v3election_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResignResponse.ProtoReflect.Descriptor instead.
func (*ResignResponse) Descriptor() ([]byte, []int) {
	return file_v3election_proto_rawDescGZIP(), []int{6}
}

func (x *ResignResponse) GetHeader() *etcdserverpb.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type ProclaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// leader is the leadership hold on the election.
	Leader *LeaderKey `protobuf:"bytes,1,opt,name=leader,proto3" json:"leader,omitempty"`
	// value is an update meant to overwrite the leader's current value.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ProclaimRequest) Reset() {
	*x = ProclaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3election_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProclaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProclaimRequest) ProtoMessage() {}

func (x *ProclaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v3election_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProclaimRequest.ProtoReflect.Descriptor instead.
func (*ProclaimRequest) Descriptor() ([]byte, []int) {
	return file_v3election_proto_rawDescGZIP(), []int{7}
}

func (x *ProclaimRequest) GetLeader() *LeaderKey {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *ProclaimRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ProclaimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *etcdserverpb.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ProclaimResponse) Reset() {
	*x = ProclaimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3election_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProclaimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProclaimResponse) ProtoMessage() {}

func (x *ProclaimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v3election_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProclaimResponse.ProtoReflect.Descriptor instead.
func (*ProclaimResponse) Descriptor() ([]byte, []int) {
	return file_v3election_proto_rawDescGZIP(), []int{8}
}

func (x *ProclaimResponse) GetHeader() *etcdserverpb.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

var File_v3election_proto protoreflect.FileDescriptor

var file_v3election_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62,
	0x1a, 0x1f, 0x65, 0x74, 0x63, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x74, 0x63, 0x64, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x65, 0x74, 0x63, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x76, 0x63, 0x63,
	0x70, 0x62, 0x2f, 0x6b, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x0f, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x79, 0x0a, 0x10,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x74, 0x63, 0x64, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52,
	0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x76, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x22, 0x23, 0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x74, 0x63, 0x64,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x02, 0x6b, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x76,
	0x63, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x6b,
	0x76, 0x22, 0x40, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0x46, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x74, 0x63, 0x64, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x58, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x74, 0x63, 0x64,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x32,
	0x97, 0x04, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x08,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x1d, 0x2e, 0x76, 0x33, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a,
	0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x6b, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x1d, 0x2e, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22,
	0x15, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x63, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1b, 0x2e, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x07, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1b, 0x2e, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76,
	0x33, 0x2f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1b,
	0x2e, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x33,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x6f, 0x2e,
	0x65, 0x74, 0x63, 0x64, 0x2e, 0x69, 0x6f, 0x2f, 0x65, 0x74, 0x63, 0x64, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x74, 0x63, 0x64, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v3election_proto_rawDescOnce sync.Once
	file_v3election_proto_rawDescData = file_v3election_proto_rawDesc
)

func file_v3election_proto_rawDescGZIP() []byte {
	file_v3election_proto_rawDescOnce.Do(func() {
		file_v3election_proto_rawDescData = protoimpl.X.CompressGZIP(file_v3election_proto_rawDescData)
	})
	return file_v3election_proto_rawDescData
}

var file_v3election_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_v3election_proto_goTypes = []interface{}{
	(*CampaignRequest)(nil),             // 0: v3electionpb.CampaignRequest
	(*CampaignResponse)(nil),            // 1: v3electionpb.CampaignResponse
	(*LeaderKey)(nil),                   // 2: v3electionpb.LeaderKey
	(*LeaderRequest)(nil),               // 3: v3electionpb.LeaderRequest
	(*LeaderResponse)(nil),              // 4: v3electionpb.LeaderResponse
	(*ResignRequest)(nil),               // 5: v3electionpb.ResignRequest
	(*ResignResponse)(nil),              // 6: v3electionpb.ResignResponse
	(*ProclaimRequest)(nil),             // 7: v3electionpb.ProclaimRequest
	(*ProclaimResponse)(nil),            // 8: v3electionpb.ProclaimResponse
	(*etcdserverpb.ResponseHeader)(nil), // 9: etcdserverpb.ResponseHeader
	(*mvccpb.KeyValue)(nil),             // 10: mvccpb.KeyValue
}
var file_v3election_proto_depIdxs = []int32{
	9,  // 0: v3electionpb.CampaignResponse.header:type_name -> etcdserverpb.ResponseHeader
	2,  // 1: v3electionpb.CampaignResponse.leader:type_name -> v3electionpb.LeaderKey
	9,  // 2: v3electionpb.LeaderResponse.header:type_name -> etcdserverpb.ResponseHeader
	10, // 3: v3electionpb.LeaderResponse.kv:type_name -> mvccpb.KeyValue
	2,  // 4: v3electionpb.ResignRequest.leader:type_name -> v3electionpb.LeaderKey
	9,  // 5: v3electionpb.ResignResponse.header:type_name -> etcdserverpb.ResponseHeader
	2,  // 6: v3electionpb.ProclaimRequest.leader:type_name -> v3electionpb.LeaderKey
	9,  // 7: v3electionpb.ProclaimResponse.header:type_name -> etcdserverpb.ResponseHeader
	0,  // 8: v3electionpb.Election.Campaign:input_type -> v3electionpb.CampaignRequest
	7,  // 9: v3electionpb.Election.Proclaim:input_type -> v3electionpb.ProclaimRequest
	3,  // 10: v3electionpb.Election.Leader:input_type -> v3electionpb.LeaderRequest
	3,  // 11: v3electionpb.Election.Observe:input_type -> v3electionpb.LeaderRequest
	5,  // 12: v3electionpb.Election.Resign:input_type -> v3electionpb.ResignRequest
	1,  // 13: v3electionpb.Election.Campaign:output_type -> v3electionpb.CampaignResponse
	8,  // 14: v3electionpb.Election.Proclaim:output_type -> v3electionpb.ProclaimResponse
	4,  // 15: v3electionpb.Election.Leader:output_type -> v3electionpb.LeaderResponse
	4,  // 16: v3electionpb.Election.Observe:output_type -> v3electionpb.LeaderResponse
	6,  // 17: v3electionpb.Election.Resign:output_type -> v3electionpb.ResignResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_v3election_proto_init() }
func file_v3election_proto_init() {
	if File_v3election_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v3election_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3election_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3election_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3election_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3election_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3election_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3election_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3election_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProclaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3election_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProclaimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v3election_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v3election_proto_goTypes,
		DependencyIndexes: file_v3election_proto_depIdxs,
		MessageInfos:      file_v3election_proto_msgTypes,
	}.Build()
	File_v3election_proto = out.File
	file_v3election_proto_rawDesc = nil
	file_v3election_proto_goTypes = nil
	file_v3election_proto_depIdxs = nil
}
