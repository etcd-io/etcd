// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: tests/functional/rpcpb/rpc.proto

package rpcpb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StresserType int32

const (
	StresserType_KV_WRITE_SMALL      StresserType = 0
	StresserType_KV_WRITE_LARGE      StresserType = 1
	StresserType_KV_READ_ONE_KEY     StresserType = 2
	StresserType_KV_READ_RANGE       StresserType = 3
	StresserType_KV_DELETE_ONE_KEY   StresserType = 4
	StresserType_KV_DELETE_RANGE     StresserType = 5
	StresserType_KV_TXN_WRITE_DELETE StresserType = 6
	StresserType_LEASE               StresserType = 10
	StresserType_ELECTION_RUNNER     StresserType = 20
	StresserType_WATCH_RUNNER        StresserType = 31
	StresserType_LOCK_RACER_RUNNER   StresserType = 41
	StresserType_LEASE_RUNNER        StresserType = 51
)

// Enum value maps for StresserType.
var (
	StresserType_name = map[int32]string{
		0:  "KV_WRITE_SMALL",
		1:  "KV_WRITE_LARGE",
		2:  "KV_READ_ONE_KEY",
		3:  "KV_READ_RANGE",
		4:  "KV_DELETE_ONE_KEY",
		5:  "KV_DELETE_RANGE",
		6:  "KV_TXN_WRITE_DELETE",
		10: "LEASE",
		20: "ELECTION_RUNNER",
		31: "WATCH_RUNNER",
		41: "LOCK_RACER_RUNNER",
		51: "LEASE_RUNNER",
	}
	StresserType_value = map[string]int32{
		"KV_WRITE_SMALL":      0,
		"KV_WRITE_LARGE":      1,
		"KV_READ_ONE_KEY":     2,
		"KV_READ_RANGE":       3,
		"KV_DELETE_ONE_KEY":   4,
		"KV_DELETE_RANGE":     5,
		"KV_TXN_WRITE_DELETE": 6,
		"LEASE":               10,
		"ELECTION_RUNNER":     20,
		"WATCH_RUNNER":        31,
		"LOCK_RACER_RUNNER":   41,
		"LEASE_RUNNER":        51,
	}
)

func (x StresserType) Enum() *StresserType {
	p := new(StresserType)
	*p = x
	return p
}

func (x StresserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StresserType) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_functional_rpcpb_rpc_proto_enumTypes[0].Descriptor()
}

func (StresserType) Type() protoreflect.EnumType {
	return &file_tests_functional_rpcpb_rpc_proto_enumTypes[0]
}

func (x StresserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StresserType.Descriptor instead.
func (StresserType) EnumDescriptor() ([]byte, []int) {
	return file_tests_functional_rpcpb_rpc_proto_rawDescGZIP(), []int{0}
}

type Checker int32

const (
	Checker_KV_HASH                Checker = 0
	Checker_LEASE_EXPIRE           Checker = 1
	Checker_RUNNER                 Checker = 2
	Checker_NO_CHECK               Checker = 3
	Checker_SHORT_TTL_LEASE_EXPIRE Checker = 4
)

// Enum value maps for Checker.
var (
	Checker_name = map[int32]string{
		0: "KV_HASH",
		1: "LEASE_EXPIRE",
		2: "RUNNER",
		3: "NO_CHECK",
		4: "SHORT_TTL_LEASE_EXPIRE",
	}
	Checker_value = map[string]int32{
		"KV_HASH":                0,
		"LEASE_EXPIRE":           1,
		"RUNNER":                 2,
		"NO_CHECK":               3,
		"SHORT_TTL_LEASE_EXPIRE": 4,
	}
)

func (x Checker) Enum() *Checker {
	p := new(Checker)
	*p = x
	return p
}

func (x Checker) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Checker) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_functional_rpcpb_rpc_proto_enumTypes[1].Descriptor()
}

func (Checker) Type() protoreflect.EnumType {
	return &file_tests_functional_rpcpb_rpc_proto_enumTypes[1]
}

func (x Checker) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Checker.Descriptor instead.
func (Checker) EnumDescriptor() ([]byte, []int) {
	return file_tests_functional_rpcpb_rpc_proto_rawDescGZIP(), []int{1}
}

type Operation int32

const (
	// NOT_STARTED is the agent status before etcd first start.
	Operation_NOT_STARTED Operation = 0
	// INITIAL_START_ETCD is only called to start etcd, the very first time.
	Operation_INITIAL_START_ETCD Operation = 10
	// RESTART_ETCD is sent to restart killed etcd.
	Operation_RESTART_ETCD Operation = 11
	// SIGTERM_ETCD pauses etcd process while keeping data directories
	// and previous etcd configurations.
	Operation_SIGTERM_ETCD Operation = 20
	// SIGQUIT_ETCD_AND_REMOVE_DATA kills etcd process and removes all data
	// directories to simulate destroying the whole machine.
	Operation_SIGQUIT_ETCD_AND_REMOVE_DATA Operation = 21
	// SAVE_SNAPSHOT is sent to trigger local member to download its snapshot
	// onto its local disk with the specified path from tester.
	Operation_SAVE_SNAPSHOT Operation = 30
	// RESTORE_RESTART_FROM_SNAPSHOT is sent to trigger local member to
	// restore a cluster from existing snapshot from disk, and restart
	// an etcd instance from recovered data.
	Operation_RESTORE_RESTART_FROM_SNAPSHOT Operation = 31
	// RESTART_FROM_SNAPSHOT is sent to trigger local member to restart
	// and join an existing cluster that has been recovered from a snapshot.
	// Local member joins this cluster with fresh data.
	Operation_RESTART_FROM_SNAPSHOT Operation = 32
	// SIGQUIT_ETCD_AND_ARCHIVE_DATA is sent when consistency check failed,
	// thus need to archive etcd data directories.
	Operation_SIGQUIT_ETCD_AND_ARCHIVE_DATA Operation = 40
	// SIGQUIT_ETCD_AND_REMOVE_DATA_AND_STOP_AGENT destroys etcd process,
	// etcd data, and agent server.
	Operation_SIGQUIT_ETCD_AND_REMOVE_DATA_AND_STOP_AGENT Operation = 41
	// BLACKHOLE_PEER_PORT_TX_RX drops all outgoing/incoming packets from/to
	// the peer port on target member's peer port.
	Operation_BLACKHOLE_PEER_PORT_TX_RX Operation = 100
	// UNBLACKHOLE_PEER_PORT_TX_RX removes outgoing/incoming packet dropping.
	Operation_UNBLACKHOLE_PEER_PORT_TX_RX Operation = 101
	// DELAY_PEER_PORT_TX_RX delays all outgoing/incoming packets from/to
	// the peer port on target member's peer port.
	Operation_DELAY_PEER_PORT_TX_RX Operation = 200
	// UNDELAY_PEER_PORT_TX_RX removes all outgoing/incoming delays.
	Operation_UNDELAY_PEER_PORT_TX_RX Operation = 201
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0:   "NOT_STARTED",
		10:  "INITIAL_START_ETCD",
		11:  "RESTART_ETCD",
		20:  "SIGTERM_ETCD",
		21:  "SIGQUIT_ETCD_AND_REMOVE_DATA",
		30:  "SAVE_SNAPSHOT",
		31:  "RESTORE_RESTART_FROM_SNAPSHOT",
		32:  "RESTART_FROM_SNAPSHOT",
		40:  "SIGQUIT_ETCD_AND_ARCHIVE_DATA",
		41:  "SIGQUIT_ETCD_AND_REMOVE_DATA_AND_STOP_AGENT",
		100: "BLACKHOLE_PEER_PORT_TX_RX",
		101: "UNBLACKHOLE_PEER_PORT_TX_RX",
		200: "DELAY_PEER_PORT_TX_RX",
		201: "UNDELAY_PEER_PORT_TX_RX",
	}
	Operation_value = map[string]int32{
		"NOT_STARTED":                                 0,
		"INITIAL_START_ETCD":                          10,
		"RESTART_ETCD":                                11,
		"SIGTERM_ETCD":                                20,
		"SIGQUIT_ETCD_AND_REMOVE_DATA":                21,
		"SAVE_SNAPSHOT":                               30,
		"RESTORE_RESTART_FROM_SNAPSHOT":               31,
		"RESTART_FROM_SNAPSHOT":                       32,
		"SIGQUIT_ETCD_AND_ARCHIVE_DATA":               40,
		"SIGQUIT_ETCD_AND_REMOVE_DATA_AND_STOP_AGENT": 41,
		"BLACKHOLE_PEER_PORT_TX_RX":                   100,
		"UNBLACKHOLE_PEER_PORT_TX_RX":                 101,
		"DELAY_PEER_PORT_TX_RX":                       200,
		"UNDELAY_PEER_PORT_TX_RX":                     201,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_functional_rpcpb_rpc_proto_enumTypes[2].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_tests_functional_rpcpb_rpc_proto_enumTypes[2]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_tests_functional_rpcpb_rpc_proto_rawDescGZIP(), []int{2}
}

// Case defines various system faults or test case in distributed systems,
// in order to verify correct behavior of etcd servers and clients.
type Case int32

const (
	// SIGTERM_ONE_FOLLOWER stops a randomly chosen follower (non-leader)
	// but does not delete its data directories on disk for next restart.
	// It waits "delay-ms" before recovering this failure.
	// The expected behavior is that the follower comes back online
	// and rejoins the cluster, and then each member continues to process
	// client requests ('Put' request that requires Raft consensus).
	Case_SIGTERM_ONE_FOLLOWER Case = 0
	// SIGTERM_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT stops a randomly chosen
	// follower but does not delete its data directories on disk for next
	// restart. And waits until most up-to-date node (leader) applies the
	// snapshot count of entries since the stop operation.
	// The expected behavior is that the follower comes back online and
	// rejoins the cluster, and then active leader sends snapshot
	// to the follower to force it to follow the leader's log.
	// As always, after recovery, each member must be able to process
	// client requests.
	Case_SIGTERM_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT Case = 1
	// SIGTERM_LEADER stops the active leader node but does not delete its
	// data directories on disk for next restart. Then it waits "delay-ms"
	// before recovering this failure, in order to trigger election timeouts.
	// The expected behavior is that a new leader gets elected, and the
	// old leader comes back online and rejoins the cluster as a follower.
	// As always, after recovery, each member must be able to process
	// client requests.
	Case_SIGTERM_LEADER Case = 2
	// SIGTERM_LEADER_UNTIL_TRIGGER_SNAPSHOT stops the active leader node
	// but does not delete its data directories on disk for next restart.
	// And waits until most up-to-date node ("new" leader) applies the
	// snapshot count of entries since the stop operation.
	// The expected behavior is that cluster elects a new leader, and the
	// old leader comes back online and rejoins the cluster as a follower.
	// And it receives the snapshot from the new leader to overwrite its
	// store. As always, after recovery, each member must be able to
	// process client requests.
	Case_SIGTERM_LEADER_UNTIL_TRIGGER_SNAPSHOT Case = 3
	// SIGTERM_QUORUM stops majority number of nodes to make the whole cluster
	// inoperable but does not delete data directories on stopped nodes
	// for next restart. And it waits "delay-ms" before recovering failure.
	// The expected behavior is that nodes come back online, thus cluster
	// comes back operative as well. As always, after recovery, each member
	// must be able to process client requests.
	Case_SIGTERM_QUORUM Case = 4
	// SIGTERM_ALL stops the whole cluster but does not delete data directories
	// on disk for next restart. And it waits "delay-ms" before  recovering
	// this failure.
	// The expected behavior is that nodes come back online, thus cluster
	// comes back operative as well. As always, after recovery, each member
	// must be able to process client requests.
	Case_SIGTERM_ALL Case = 5
	// SIGQUIT_AND_REMOVE_ONE_FOLLOWER stops a randomly chosen follower
	// (non-leader), deletes its data directories on disk, and removes
	// this member from cluster (membership reconfiguration). On recovery,
	// tester adds a new member, and this member joins the existing cluster
	// with fresh data. It waits "delay-ms" before recovering this
	// failure. This simulates destroying one follower machine, where operator
	// needs to add a new member from a fresh machine.
	// The expected behavior is that a new member joins the existing cluster,
	// and then each member continues to process client requests.
	Case_SIGQUIT_AND_REMOVE_ONE_FOLLOWER Case = 10
	// SIGQUIT_AND_REMOVE_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT stops a randomly
	// chosen follower, deletes its data directories on disk, and removes
	// this member from cluster (membership reconfiguration). On recovery,
	// tester adds a new member, and this member joins the existing cluster
	// restart. On member remove, cluster waits until most up-to-date node
	// (leader) applies the snapshot count of entries since the stop operation.
	// This simulates destroying a leader machine, where operator needs to add
	// a new member from a fresh machine.
	// The expected behavior is that a new member joins the existing cluster,
	// and receives a snapshot from the active leader. As always, after
	// recovery, each member must be able to process client requests.
	Case_SIGQUIT_AND_REMOVE_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT Case = 11
	// SIGQUIT_AND_REMOVE_LEADER stops the active leader node, deletes its
	// data directories on disk, and removes this member from cluster.
	// On recovery, tester adds a new member, and this member joins the
	// existing cluster with fresh data. It waits "delay-ms" before
	// recovering this failure. This simulates destroying a leader machine,
	// where operator needs to add a new member from a fresh machine.
	// The expected behavior is that a new member joins the existing cluster,
	// and then each member continues to process client requests.
	Case_SIGQUIT_AND_REMOVE_LEADER Case = 12
	// SIGQUIT_AND_REMOVE_LEADER_UNTIL_TRIGGER_SNAPSHOT stops the active leader,
	// deletes its data directories on disk, and removes this member from
	// cluster (membership reconfiguration). On recovery, tester adds a new
	// member, and this member joins the existing cluster restart. On member
	// remove, cluster waits until most up-to-date node (new leader) applies
	// the snapshot count of entries since the stop operation. This simulates
	// destroying a leader machine, where operator needs to add a new member
	// from a fresh machine.
	// The expected behavior is that on member remove, cluster elects a new
	// leader, and a new member joins the existing cluster and receives a
	// snapshot from the newly elected leader. As always, after recovery, each
	// member must be able to process client requests.
	Case_SIGQUIT_AND_REMOVE_LEADER_UNTIL_TRIGGER_SNAPSHOT Case = 13
	// SIGQUIT_AND_REMOVE_QUORUM_AND_RESTORE_LEADER_SNAPSHOT_FROM_SCRATCH first
	// stops majority number of nodes, deletes data directories on those quorum
	// nodes, to make the whole cluster inoperable. Now that quorum and their
	// data are totally destroyed, cluster cannot even remove unavailable nodes
	// (e.g. 2 out of 3 are lost, so no leader can be elected).
	// Let's assume 3-node cluster of node A, B, and C. One day, node A and B
	// are destroyed and all their data are gone. The only viable solution is
	// to recover from C's latest snapshot.
	//
	// To simulate:
	//  1. Assume node C is the current leader with most up-to-date data.
	//  2. Download snapshot from node C, before destroying node A and B.
	//  3. Destroy node A and B, and make the whole cluster inoperable.
	//  4. Now node C cannot operate either.
	//  5. SIGTERM node C and remove its data directories.
	//  6. Restore a new seed member from node C's latest snapshot file.
	//  7. Add another member to establish 2-node cluster.
	//  8. Add another member to establish 3-node cluster.
	//  9. Add more if any.
	//
	// The expected behavior is that etcd successfully recovers from such
	// disastrous situation as only 1-node survives out of 3-node cluster,
	// new members joins the existing cluster, and previous data from snapshot
	// are still preserved after recovery process. As always, after recovery,
	// each member must be able to process client requests.
	Case_SIGQUIT_AND_REMOVE_QUORUM_AND_RESTORE_LEADER_SNAPSHOT_FROM_SCRATCH Case = 14
	// BLACKHOLE_PEER_PORT_TX_RX_ONE_FOLLOWER drops all outgoing/incoming
	// packets from/to the peer port on a randomly chosen follower
	// (non-leader), and waits for "delay-ms" until recovery.
	// The expected behavior is that once dropping operation is undone,
	// each member must be able to process client requests.
	Case_BLACKHOLE_PEER_PORT_TX_RX_ONE_FOLLOWER Case = 100
	// BLACKHOLE_PEER_PORT_TX_RX_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT drops
	// all outgoing/incoming packets from/to the peer port on a randomly
	// chosen follower (non-leader), and waits for most up-to-date node
	// (leader) applies the snapshot count of entries since the blackhole
	// operation.
	// The expected behavior is that once packet drop operation is undone,
	// the slow follower tries to catch up, possibly receiving the snapshot
	// from the active leader. As always, after recovery, each member must
	// be able to process client requests.
	Case_BLACKHOLE_PEER_PORT_TX_RX_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT Case = 101
	// BLACKHOLE_PEER_PORT_TX_RX_LEADER drops all outgoing/incoming packets
	// from/to the peer port on the active leader (isolated), and waits for
	// "delay-ms" until recovery, in order to trigger election timeout.
	// The expected behavior is that after election timeout, a new leader gets
	// elected, and once dropping operation is undone, the old leader comes
	// back and rejoins the cluster as a follower. As always, after recovery,
	// each member must be able to process client requests.
	Case_BLACKHOLE_PEER_PORT_TX_RX_LEADER Case = 102
	// BLACKHOLE_PEER_PORT_TX_RX_LEADER_UNTIL_TRIGGER_SNAPSHOT drops all
	// outgoing/incoming packets from/to the peer port on the active leader,
	// and waits for most up-to-date node (leader) applies the snapshot
	// count of entries since the blackhole operation.
	// The expected behavior is that cluster elects a new leader, and once
	// dropping operation is undone, the old leader comes back and rejoins
	// the cluster as a follower. The slow follower tries to catch up, likely
	// receiving the snapshot from the new active leader. As always, after
	// recovery, each member must be able to process client requests.
	Case_BLACKHOLE_PEER_PORT_TX_RX_LEADER_UNTIL_TRIGGER_SNAPSHOT Case = 103
	// BLACKHOLE_PEER_PORT_TX_RX_QUORUM drops all outgoing/incoming packets
	// from/to the peer ports on majority nodes of cluster, thus losing its
	// leader and cluster being inoperable. And it waits for "delay-ms"
	// until recovery.
	// The expected behavior is that once packet drop operation is undone,
	// nodes come back online, thus cluster comes back operative. As always,
	// after recovery, each member must be able to process client requests.
	Case_BLACKHOLE_PEER_PORT_TX_RX_QUORUM Case = 104
	// BLACKHOLE_PEER_PORT_TX_RX_ALL drops all outgoing/incoming packets
	// from/to the peer ports on all nodes, thus making cluster totally
	// inoperable. It waits for "delay-ms" until recovery.
	// The expected behavior is that once packet drop operation is undone,
	// nodes come back online, thus cluster comes back operative. As always,
	// after recovery, each member must be able to process client requests.
	Case_BLACKHOLE_PEER_PORT_TX_RX_ALL Case = 105
	// DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER delays outgoing/incoming packets
	// from/to the peer port on a randomly chosen follower (non-leader).
	// It waits for "delay-ms" until recovery.
	// The expected behavior is that once packet delay operation is undone,
	// the follower comes back and tries to catch up with latest changes from
	// cluster. And as always, after recovery, each member must be able to
	// process client requests.
	Case_DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER Case = 200
	// RANDOM_DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER delays outgoing/incoming
	// packets from/to the peer port on a randomly chosen follower
	// (non-leader) with a randomized time duration (thus isolated). It
	// waits for "delay-ms" until recovery.
	// The expected behavior is that once packet delay operation is undone,
	// each member must be able to process client requests.
	Case_RANDOM_DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER Case = 201
	// DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT delays
	// outgoing/incoming packets from/to the peer port on a randomly chosen
	// follower (non-leader), and waits for most up-to-date node (leader)
	// applies the snapshot count of entries since the delay operation.
	// The expected behavior is that the delayed follower gets isolated
	// and behind the current active leader, and once delay operation is undone,
	// the slow follower comes back and catches up possibly receiving snapshot
	// from the active leader. As always, after recovery, each member must be
	// able to process client requests.
	Case_DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT Case = 202
	// RANDOM_DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT delays
	// outgoing/incoming packets from/to the peer port on a randomly chosen
	// follower (non-leader) with a randomized time duration, and waits for
	// most up-to-date node (leader) applies the snapshot count of entries
	// since the delay operation.
	// The expected behavior is that the delayed follower gets isolated
	// and behind the current active leader, and once delay operation is undone,
	// the slow follower comes back and catches up, possibly receiving a
	// snapshot from the active leader. As always, after recovery, each member
	// must be able to process client requests.
	Case_RANDOM_DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT Case = 203
	// DELAY_PEER_PORT_TX_RX_LEADER delays outgoing/incoming packets from/to
	// the peer port on the active leader. And waits for "delay-ms" until
	// recovery.
	// The expected behavior is that cluster may elect a new leader, and
	// once packet delay operation is undone, the (old) leader comes back
	// and tries to catch up with latest changes from cluster. As always,
	// after recovery, each member must be able to process client requests.
	Case_DELAY_PEER_PORT_TX_RX_LEADER Case = 204
	// RANDOM_DELAY_PEER_PORT_TX_RX_LEADER delays outgoing/incoming packets
	// from/to the peer port on the active leader with a randomized time
	// duration. And waits for "delay-ms" until recovery.
	// The expected behavior is that cluster may elect a new leader, and
	// once packet delay operation is undone, the (old) leader comes back
	// and tries to catch up with latest changes from cluster. As always,
	// after recovery, each member must be able to process client requests.
	Case_RANDOM_DELAY_PEER_PORT_TX_RX_LEADER Case = 205
	// DELAY_PEER_PORT_TX_RX_LEADER_UNTIL_TRIGGER_SNAPSHOT delays
	// outgoing/incoming packets from/to the peer port on the active leader,
	// and waits for most up-to-date node (current or new leader) applies the
	// snapshot count of entries since the delay operation.
	// The expected behavior is that cluster may elect a new leader, and
	// the old leader gets isolated and behind the current active leader,
	// and once delay operation is undone, the slow follower comes back
	// and catches up, likely receiving a snapshot from the active leader.
	// As always, after recovery, each member must be able to process client
	// requests.
	Case_DELAY_PEER_PORT_TX_RX_LEADER_UNTIL_TRIGGER_SNAPSHOT Case = 206
	// RANDOM_DELAY_PEER_PORT_TX_RX_LEADER_UNTIL_TRIGGER_SNAPSHOT delays
	// outgoing/incoming packets from/to the peer port on the active leader,
	// with a randomized time duration. And it waits for most up-to-date node
	// (current or new leader) applies the snapshot count of entries since the
	// delay operation.
	// The expected behavior is that cluster may elect a new leader, and
	// the old leader gets isolated and behind the current active leader,
	// and once delay operation is undone, the slow follower comes back
	// and catches up, likely receiving a snapshot from the active leader.
	// As always, after recovery, each member must be able to process client
	// requests.
	Case_RANDOM_DELAY_PEER_PORT_TX_RX_LEADER_UNTIL_TRIGGER_SNAPSHOT Case = 207
	// DELAY_PEER_PORT_TX_RX_QUORUM delays outgoing/incoming packets from/to
	// the peer ports on majority nodes of cluster. And it waits for
	// "delay-ms" until recovery, likely to trigger election timeouts.
	// The expected behavior is that cluster may elect a new leader, while
	// quorum of nodes struggle with slow networks, and once delay operation
	// is undone, nodes come back and cluster comes back operative. As always,
	// after recovery, each member must be able to process client requests.
	Case_DELAY_PEER_PORT_TX_RX_QUORUM Case = 208
	// RANDOM_DELAY_PEER_PORT_TX_RX_QUORUM delays outgoing/incoming packets
	// from/to the peer ports on majority nodes of cluster, with randomized
	// time durations. And it waits for "delay-ms" until recovery, likely
	// to trigger election timeouts.
	// The expected behavior is that cluster may elect a new leader, while
	// quorum of nodes struggle with slow networks, and once delay operation
	// is undone, nodes come back and cluster comes back operative. As always,
	// after recovery, each member must be able to process client requests.
	Case_RANDOM_DELAY_PEER_PORT_TX_RX_QUORUM Case = 209
	// DELAY_PEER_PORT_TX_RX_ALL delays outgoing/incoming packets from/to the
	// peer ports on all nodes. And it waits for "delay-ms" until recovery,
	// likely to trigger election timeouts.
	// The expected behavior is that cluster may become totally inoperable,
	// struggling with slow networks across the whole cluster. Once delay
	// operation is undone, nodes come back and cluster comes back operative.
	// As always, after recovery, each member must be able to process client
	// requests.
	Case_DELAY_PEER_PORT_TX_RX_ALL Case = 210
	// RANDOM_DELAY_PEER_PORT_TX_RX_ALL delays outgoing/incoming packets
	// from/to the peer ports on all nodes, with randomized time durations.
	// And it waits for "delay-ms" until recovery, likely to trigger
	// election timeouts.
	// The expected behavior is that cluster may become totally inoperable,
	// struggling with slow networks across the whole cluster. Once delay
	// operation is undone, nodes come back and cluster comes back operative.
	// As always, after recovery, each member must be able to process client
	// requests.
	Case_RANDOM_DELAY_PEER_PORT_TX_RX_ALL Case = 211
	// NO_FAIL_WITH_STRESS stops injecting failures while testing the
	// consistency and correctness under pressure loads, for the duration of
	// "delay-ms". Goal is to ensure cluster be still making progress
	// on recovery, and verify system does not deadlock following a sequence
	// of failure injections.
	// The expected behavior is that cluster remains fully operative in healthy
	// condition. As always, after recovery, each member must be able to process
	// client requests.
	Case_NO_FAIL_WITH_STRESS Case = 300
	// NO_FAIL_WITH_NO_STRESS_FOR_LIVENESS neither injects failures nor
	// sends stressig client requests to the cluster, for the duration of
	// "delay-ms". Goal is to ensure cluster be still making progress
	// on recovery, and verify system does not deadlock following a sequence
	// of failure injections.
	// The expected behavior is that cluster remains fully operative in healthy
	// condition, and clients requests during liveness period succeed without
	// errors.
	// Note: this is how Google Chubby does failure injection testing
	// https://static.googleusercontent.com/media/research.google.com/en//archive/paxos_made_live.pdf.
	Case_NO_FAIL_WITH_NO_STRESS_FOR_LIVENESS Case = 301
	// FAILPOINTS injects failpoints to etcd server runtime, triggering panics
	// in critical code paths.
	Case_FAILPOINTS Case = 400
	// FAILPOINTS_WITH_DISK_IO_LATENCY injects high disk I/O latency failure in raftAfterSave code paths.
	Case_FAILPOINTS_WITH_DISK_IO_LATENCY Case = 401
	// EXTERNAL runs external failure injection scripts.
	Case_EXTERNAL Case = 500
)

// Enum value maps for Case.
var (
	Case_name = map[int32]string{
		0:   "SIGTERM_ONE_FOLLOWER",
		1:   "SIGTERM_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT",
		2:   "SIGTERM_LEADER",
		3:   "SIGTERM_LEADER_UNTIL_TRIGGER_SNAPSHOT",
		4:   "SIGTERM_QUORUM",
		5:   "SIGTERM_ALL",
		10:  "SIGQUIT_AND_REMOVE_ONE_FOLLOWER",
		11:  "SIGQUIT_AND_REMOVE_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT",
		12:  "SIGQUIT_AND_REMOVE_LEADER",
		13:  "SIGQUIT_AND_REMOVE_LEADER_UNTIL_TRIGGER_SNAPSHOT",
		14:  "SIGQUIT_AND_REMOVE_QUORUM_AND_RESTORE_LEADER_SNAPSHOT_FROM_SCRATCH",
		100: "BLACKHOLE_PEER_PORT_TX_RX_ONE_FOLLOWER",
		101: "BLACKHOLE_PEER_PORT_TX_RX_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT",
		102: "BLACKHOLE_PEER_PORT_TX_RX_LEADER",
		103: "BLACKHOLE_PEER_PORT_TX_RX_LEADER_UNTIL_TRIGGER_SNAPSHOT",
		104: "BLACKHOLE_PEER_PORT_TX_RX_QUORUM",
		105: "BLACKHOLE_PEER_PORT_TX_RX_ALL",
		200: "DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER",
		201: "RANDOM_DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER",
		202: "DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT",
		203: "RANDOM_DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT",
		204: "DELAY_PEER_PORT_TX_RX_LEADER",
		205: "RANDOM_DELAY_PEER_PORT_TX_RX_LEADER",
		206: "DELAY_PEER_PORT_TX_RX_LEADER_UNTIL_TRIGGER_SNAPSHOT",
		207: "RANDOM_DELAY_PEER_PORT_TX_RX_LEADER_UNTIL_TRIGGER_SNAPSHOT",
		208: "DELAY_PEER_PORT_TX_RX_QUORUM",
		209: "RANDOM_DELAY_PEER_PORT_TX_RX_QUORUM",
		210: "DELAY_PEER_PORT_TX_RX_ALL",
		211: "RANDOM_DELAY_PEER_PORT_TX_RX_ALL",
		300: "NO_FAIL_WITH_STRESS",
		301: "NO_FAIL_WITH_NO_STRESS_FOR_LIVENESS",
		400: "FAILPOINTS",
		401: "FAILPOINTS_WITH_DISK_IO_LATENCY",
		500: "EXTERNAL",
	}
	Case_value = map[string]int32{
		"SIGTERM_ONE_FOLLOWER":                                               0,
		"SIGTERM_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT":                        1,
		"SIGTERM_LEADER":                                                     2,
		"SIGTERM_LEADER_UNTIL_TRIGGER_SNAPSHOT":                              3,
		"SIGTERM_QUORUM":                                                     4,
		"SIGTERM_ALL":                                                        5,
		"SIGQUIT_AND_REMOVE_ONE_FOLLOWER":                                    10,
		"SIGQUIT_AND_REMOVE_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT":             11,
		"SIGQUIT_AND_REMOVE_LEADER":                                          12,
		"SIGQUIT_AND_REMOVE_LEADER_UNTIL_TRIGGER_SNAPSHOT":                   13,
		"SIGQUIT_AND_REMOVE_QUORUM_AND_RESTORE_LEADER_SNAPSHOT_FROM_SCRATCH": 14,
		"BLACKHOLE_PEER_PORT_TX_RX_ONE_FOLLOWER":                             100,
		"BLACKHOLE_PEER_PORT_TX_RX_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT":      101,
		"BLACKHOLE_PEER_PORT_TX_RX_LEADER":                                   102,
		"BLACKHOLE_PEER_PORT_TX_RX_LEADER_UNTIL_TRIGGER_SNAPSHOT":            103,
		"BLACKHOLE_PEER_PORT_TX_RX_QUORUM":                                   104,
		"BLACKHOLE_PEER_PORT_TX_RX_ALL":                                      105,
		"DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER":                                 200,
		"RANDOM_DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER":                          201,
		"DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT":          202,
		"RANDOM_DELAY_PEER_PORT_TX_RX_ONE_FOLLOWER_UNTIL_TRIGGER_SNAPSHOT":   203,
		"DELAY_PEER_PORT_TX_RX_LEADER":                                       204,
		"RANDOM_DELAY_PEER_PORT_TX_RX_LEADER":                                205,
		"DELAY_PEER_PORT_TX_RX_LEADER_UNTIL_TRIGGER_SNAPSHOT":                206,
		"RANDOM_DELAY_PEER_PORT_TX_RX_LEADER_UNTIL_TRIGGER_SNAPSHOT":         207,
		"DELAY_PEER_PORT_TX_RX_QUORUM":                                       208,
		"RANDOM_DELAY_PEER_PORT_TX_RX_QUORUM":                                209,
		"DELAY_PEER_PORT_TX_RX_ALL":                                          210,
		"RANDOM_DELAY_PEER_PORT_TX_RX_ALL":                                   211,
		"NO_FAIL_WITH_STRESS":                                                300,
		"NO_FAIL_WITH_NO_STRESS_FOR_LIVENESS":                                301,
		"FAILPOINTS":                                                         400,
		"FAILPOINTS_WITH_DISK_IO_LATENCY":                                    401,
		"EXTERNAL":                                                           500,
	}
)

func (x Case) Enum() *Case {
	p := new(Case)
	*p = x
	return p
}

func (x Case) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Case) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_functional_rpcpb_rpc_proto_enumTypes[3].Descriptor()
}

func (Case) Type() protoreflect.EnumType {
	return &file_tests_functional_rpcpb_rpc_proto_enumTypes[3]
}

func (x Case) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Case.Descriptor instead.
func (Case) EnumDescriptor() ([]byte, []int) {
	return file_tests_functional_rpcpb_rpc_proto_rawDescGZIP(), []int{3}
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation Operation `protobuf:"varint,1,opt,name=Operation,proto3,enum=rpcpb.Operation" json:"Operation,omitempty"`
	// Member contains the same Member object from tester configuration.
	Member *Member `protobuf:"bytes,2,opt,name=Member,proto3" json:"Member,omitempty"`
	// Tester contains tester configuration.
	Tester *Tester `protobuf:"bytes,3,opt,name=Tester,proto3" json:"Tester,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_tests_functional_rpcpb_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetOperation() Operation {
	if x != nil {
		return x.Operation
	}
	return Operation_NOT_STARTED
}

func (x *Request) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Request) GetTester() *Tester {
	if x != nil {
		return x.Tester
	}
	return nil
}

// SnapshotInfo contains SAVE_SNAPSHOT request results.
type SnapshotInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberName        string   `protobuf:"bytes,1,opt,name=MemberName,proto3" json:"MemberName,omitempty"`
	MemberClientURLs  []string `protobuf:"bytes,2,rep,name=MemberClientURLs,proto3" json:"MemberClientURLs,omitempty"`
	SnapshotPath      string   `protobuf:"bytes,3,opt,name=SnapshotPath,proto3" json:"SnapshotPath,omitempty"`
	SnapshotFileSize  string   `protobuf:"bytes,4,opt,name=SnapshotFileSize,proto3" json:"SnapshotFileSize,omitempty"`
	SnapshotTotalSize string   `protobuf:"bytes,5,opt,name=SnapshotTotalSize,proto3" json:"SnapshotTotalSize,omitempty"`
	SnapshotTotalKey  int64    `protobuf:"varint,6,opt,name=SnapshotTotalKey,proto3" json:"SnapshotTotalKey,omitempty"`
	SnapshotHash      int64    `protobuf:"varint,7,opt,name=SnapshotHash,proto3" json:"SnapshotHash,omitempty"`
	SnapshotRevision  int64    `protobuf:"varint,8,opt,name=SnapshotRevision,proto3" json:"SnapshotRevision,omitempty"`
	Took              string   `protobuf:"bytes,9,opt,name=Took,proto3" json:"Took,omitempty"`
	Version           string   `protobuf:"bytes,10,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *SnapshotInfo) Reset() {
	*x = SnapshotInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotInfo) ProtoMessage() {}

func (x *SnapshotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotInfo.ProtoReflect.Descriptor instead.
func (*SnapshotInfo) Descriptor() ([]byte, []int) {
	return file_tests_functional_rpcpb_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *SnapshotInfo) GetMemberName() string {
	if x != nil {
		return x.MemberName
	}
	return ""
}

func (x *SnapshotInfo) GetMemberClientURLs() []string {
	if x != nil {
		return x.MemberClientURLs
	}
	return nil
}

func (x *SnapshotInfo) GetSnapshotPath() string {
	if x != nil {
		return x.SnapshotPath
	}
	return ""
}

func (x *SnapshotInfo) GetSnapshotFileSize() string {
	if x != nil {
		return x.SnapshotFileSize
	}
	return ""
}

func (x *SnapshotInfo) GetSnapshotTotalSize() string {
	if x != nil {
		return x.SnapshotTotalSize
	}
	return ""
}

func (x *SnapshotInfo) GetSnapshotTotalKey() int64 {
	if x != nil {
		return x.SnapshotTotalKey
	}
	return 0
}

func (x *SnapshotInfo) GetSnapshotHash() int64 {
	if x != nil {
		return x.SnapshotHash
	}
	return 0
}

func (x *SnapshotInfo) GetSnapshotRevision() int64 {
	if x != nil {
		return x.SnapshotRevision
	}
	return 0
}

func (x *SnapshotInfo) GetTook() string {
	if x != nil {
		return x.Took
	}
	return ""
}

func (x *SnapshotInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	// Member contains the same Member object from tester request.
	Member *Member `protobuf:"bytes,3,opt,name=Member,proto3" json:"Member,omitempty"`
	// SnapshotInfo contains SAVE_SNAPSHOT request results.
	SnapshotInfo *SnapshotInfo `protobuf:"bytes,4,opt,name=SnapshotInfo,proto3" json:"SnapshotInfo,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_tests_functional_rpcpb_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Response) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Response) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Response) GetSnapshotInfo() *SnapshotInfo {
	if x != nil {
		return x.SnapshotInfo
	}
	return nil
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EtcdExec is the executable etcd binary path in agent server.
	EtcdExec string `protobuf:"bytes,1,opt,name=EtcdExec,proto3" json:"EtcdExec,omitempty"`
	// AgentAddr is the agent HTTP server address.
	AgentAddr string `protobuf:"bytes,11,opt,name=AgentAddr,proto3" json:"AgentAddr,omitempty"`
	// FailpointHTTPAddr is the agent's failpoints HTTP server address.
	FailpointHTTPAddr string `protobuf:"bytes,12,opt,name=FailpointHTTPAddr,proto3" json:"FailpointHTTPAddr,omitempty"`
	// BaseDir is the base directory where all logs and etcd data are stored.
	BaseDir string `protobuf:"bytes,101,opt,name=BaseDir,proto3" json:"BaseDir,omitempty"`
	// EtcdClientProxy is true when client traffic needs to be proxied.
	// If true, listen client URL port must be different than advertise client URL port.
	EtcdClientProxy bool `protobuf:"varint,201,opt,name=EtcdClientProxy,proto3" json:"EtcdClientProxy,omitempty"`
	// EtcdPeerProxy is true when peer traffic needs to be proxied.
	// If true, listen peer URL port must be different than advertise peer URL port.
	EtcdPeerProxy bool `protobuf:"varint,202,opt,name=EtcdPeerProxy,proto3" json:"EtcdPeerProxy,omitempty"`
	// EtcdClientEndpoint is the etcd client endpoint.
	EtcdClientEndpoint string `protobuf:"bytes,301,opt,name=EtcdClientEndpoint,proto3" json:"EtcdClientEndpoint,omitempty"`
	// Etcd defines etcd binary configuration flags.
	Etcd *Etcd `protobuf:"bytes,302,opt,name=Etcd,proto3" json:"Etcd,omitempty"`
	// EtcdOnSnapshotRestore defines one-time use configuration during etcd
	// snapshot recovery process.
	EtcdOnSnapshotRestore *Etcd `protobuf:"bytes,303,opt,name=EtcdOnSnapshotRestore,proto3" json:"EtcdOnSnapshotRestore,omitempty"`
	// ClientCertData contains cert file contents from this member's etcd server.
	ClientCertData string `protobuf:"bytes,401,opt,name=ClientCertData,proto3" json:"ClientCertData,omitempty"`
	ClientCertPath string `protobuf:"bytes,402,opt,name=ClientCertPath,proto3" json:"ClientCertPath,omitempty"`
	// ClientKeyData contains key file contents from this member's etcd server.
	ClientKeyData string `protobuf:"bytes,403,opt,name=ClientKeyData,proto3" json:"ClientKeyData,omitempty"`
	ClientKeyPath string `protobuf:"bytes,404,opt,name=ClientKeyPath,proto3" json:"ClientKeyPath,omitempty"`
	// ClientTrustedCAData contains trusted CA file contents from this member's etcd server.
	ClientTrustedCAData string `protobuf:"bytes,405,opt,name=ClientTrustedCAData,proto3" json:"ClientTrustedCAData,omitempty"`
	ClientTrustedCAPath string `protobuf:"bytes,406,opt,name=ClientTrustedCAPath,proto3" json:"ClientTrustedCAPath,omitempty"`
	// PeerCertData contains cert file contents from this member's etcd server.
	PeerCertData string `protobuf:"bytes,501,opt,name=PeerCertData,proto3" json:"PeerCertData,omitempty"`
	PeerCertPath string `protobuf:"bytes,502,opt,name=PeerCertPath,proto3" json:"PeerCertPath,omitempty"`
	// PeerKeyData contains key file contents from this member's etcd server.
	PeerKeyData string `protobuf:"bytes,503,opt,name=PeerKeyData,proto3" json:"PeerKeyData,omitempty"`
	PeerKeyPath string `protobuf:"bytes,504,opt,name=PeerKeyPath,proto3" json:"PeerKeyPath,omitempty"`
	// PeerTrustedCAData contains trusted CA file contents from this member's etcd server.
	PeerTrustedCAData string `protobuf:"bytes,505,opt,name=PeerTrustedCAData,proto3" json:"PeerTrustedCAData,omitempty"`
	PeerTrustedCAPath string `protobuf:"bytes,506,opt,name=PeerTrustedCAPath,proto3" json:"PeerTrustedCAPath,omitempty"`
	// SnapshotPath is the snapshot file path to store or restore from.
	SnapshotPath string `protobuf:"bytes,601,opt,name=SnapshotPath,proto3" json:"SnapshotPath,omitempty"`
	// SnapshotInfo contains last SAVE_SNAPSHOT request results.
	SnapshotInfo *SnapshotInfo `protobuf:"bytes,602,opt,name=SnapshotInfo,proto3" json:"SnapshotInfo,omitempty"`
	// Failpoints is the GOFAIL_FAILPOINTS environment variable value to use when starting etcd.
	Failpoints string `protobuf:"bytes,701,opt,name=Failpoints,proto3" json:"Failpoints,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_tests_functional_rpcpb_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *Member) GetEtcdExec() string {
	if x != nil {
		return x.EtcdExec
	}
	return ""
}

func (x *Member) GetAgentAddr() string {
	if x != nil {
		return x.AgentAddr
	}
	return ""
}

func (x *Member) GetFailpointHTTPAddr() string {
	if x != nil {
		return x.FailpointHTTPAddr
	}
	return ""
}

func (x *Member) GetBaseDir() string {
	if x != nil {
		return x.BaseDir
	}
	return ""
}

func (x *Member) GetEtcdClientProxy() bool {
	if x != nil {
		return x.EtcdClientProxy
	}
	return false
}

func (x *Member) GetEtcdPeerProxy() bool {
	if x != nil {
		return x.EtcdPeerProxy
	}
	return false
}

func (x *Member) GetEtcdClientEndpoint() string {
	if x != nil {
		return x.EtcdClientEndpoint
	}
	return ""
}

func (x *Member) GetEtcd() *Etcd {
	if x != nil {
		return x.Etcd
	}
	return nil
}

func (x *Member) GetEtcdOnSnapshotRestore() *Etcd {
	if x != nil {
		return x.EtcdOnSnapshotRestore
	}
	return nil
}

func (x *Member) GetClientCertData() string {
	if x != nil {
		return x.ClientCertData
	}
	return ""
}

func (x *Member) GetClientCertPath() string {
	if x != nil {
		return x.ClientCertPath
	}
	return ""
}

func (x *Member) GetClientKeyData() string {
	if x != nil {
		return x.ClientKeyData
	}
	return ""
}

func (x *Member) GetClientKeyPath() string {
	if x != nil {
		return x.ClientKeyPath
	}
	return ""
}

func (x *Member) GetClientTrustedCAData() string {
	if x != nil {
		return x.ClientTrustedCAData
	}
	return ""
}

func (x *Member) GetClientTrustedCAPath() string {
	if x != nil {
		return x.ClientTrustedCAPath
	}
	return ""
}

func (x *Member) GetPeerCertData() string {
	if x != nil {
		return x.PeerCertData
	}
	return ""
}

func (x *Member) GetPeerCertPath() string {
	if x != nil {
		return x.PeerCertPath
	}
	return ""
}

func (x *Member) GetPeerKeyData() string {
	if x != nil {
		return x.PeerKeyData
	}
	return ""
}

func (x *Member) GetPeerKeyPath() string {
	if x != nil {
		return x.PeerKeyPath
	}
	return ""
}

func (x *Member) GetPeerTrustedCAData() string {
	if x != nil {
		return x.PeerTrustedCAData
	}
	return ""
}

func (x *Member) GetPeerTrustedCAPath() string {
	if x != nil {
		return x.PeerTrustedCAPath
	}
	return ""
}

func (x *Member) GetSnapshotPath() string {
	if x != nil {
		return x.SnapshotPath
	}
	return ""
}

func (x *Member) GetSnapshotInfo() *SnapshotInfo {
	if x != nil {
		return x.SnapshotInfo
	}
	return nil
}

func (x *Member) GetFailpoints() string {
	if x != nil {
		return x.Failpoints
	}
	return ""
}

type Tester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataDir string `protobuf:"bytes,1,opt,name=DataDir,proto3" json:"DataDir,omitempty"`
	Network string `protobuf:"bytes,2,opt,name=Network,proto3" json:"Network,omitempty"`
	Addr    string `protobuf:"bytes,3,opt,name=Addr,proto3" json:"Addr,omitempty"`
	// DelayLatencyMsRv is the delay latency in milliseconds,
	// to inject to simulated slow network.
	DelayLatencyMs uint32 `protobuf:"varint,11,opt,name=DelayLatencyMs,proto3" json:"DelayLatencyMs,omitempty"`
	// DelayLatencyMsRv is the delay latency random variable in milliseconds.
	DelayLatencyMsRv uint32 `protobuf:"varint,12,opt,name=DelayLatencyMsRv,proto3" json:"DelayLatencyMsRv,omitempty"`
	// UpdatedDelayLatencyMs is the update delay latency in milliseconds,
	// to inject to simulated slow network. It's the final latency to apply,
	// in case the latency numbers are randomly generated from given delay latency field.
	UpdatedDelayLatencyMs uint32 `protobuf:"varint,13,opt,name=UpdatedDelayLatencyMs,proto3" json:"UpdatedDelayLatencyMs,omitempty"`
	// RoundLimit is the limit of rounds to run failure set (-1 to run without limits).
	RoundLimit int32 `protobuf:"varint,21,opt,name=RoundLimit,proto3" json:"RoundLimit,omitempty"`
	// ExitOnCaseFail is true, then exit tester on first failure.
	ExitOnCaseFail bool `protobuf:"varint,22,opt,name=ExitOnCaseFail,proto3" json:"ExitOnCaseFail,omitempty"`
	// EnablePprof is true to enable profiler.
	EnablePprof bool `protobuf:"varint,23,opt,name=EnablePprof,proto3" json:"EnablePprof,omitempty"`
	// CaseDelayMs is the delay duration after failure is injected.
	// Useful when triggering snapshot or no-op failure cases.
	CaseDelayMs uint32 `protobuf:"varint,31,opt,name=CaseDelayMs,proto3" json:"CaseDelayMs,omitempty"`
	// CaseShuffle is true to randomize failure injecting order.
	CaseShuffle bool `protobuf:"varint,32,opt,name=CaseShuffle,proto3" json:"CaseShuffle,omitempty"`
	// Cases is the selected test cases to schedule.
	// If empty, run all failure cases.
	Cases []string `protobuf:"bytes,33,rep,name=Cases,proto3" json:"Cases,omitempty"`
	// FailpointCommands is the list of "gofail" commands
	// (e.g. panic("etcd-tester"),1*sleep(1000).
	FailpointCommands []string `protobuf:"bytes,34,rep,name=FailpointCommands,proto3" json:"FailpointCommands,omitempty"`
	// RunnerExecPath is a path of etcd-runner binary.
	RunnerExecPath string `protobuf:"bytes,41,opt,name=RunnerExecPath,proto3" json:"RunnerExecPath,omitempty"`
	// ExternalExecPath is a path of script for enabling/disabling an external fault injector.
	ExternalExecPath string `protobuf:"bytes,42,opt,name=ExternalExecPath,proto3" json:"ExternalExecPath,omitempty"`
	// Stressers is the list of stresser types:
	// KV, LEASE, ELECTION_RUNNER, WATCH_RUNNER, LOCK_RACER_RUNNER, LEASE_RUNNER.
	Stressers []*Stresser `protobuf:"bytes,101,rep,name=Stressers,proto3" json:"Stressers,omitempty"`
	// Checkers is the list of consistency checker types:
	// KV_HASH, LEASE_EXPIRE, NO_CHECK, RUNNER.
	// Leave empty to skip consistency checks.
	Checkers []string `protobuf:"bytes,102,rep,name=Checkers,proto3" json:"Checkers,omitempty"`
	// StressKeySize is the size of each small key written into etcd.
	StressKeySize int32 `protobuf:"varint,201,opt,name=StressKeySize,proto3" json:"StressKeySize,omitempty"`
	// StressKeySizeLarge is the size of each large key written into etcd.
	StressKeySizeLarge int32 `protobuf:"varint,202,opt,name=StressKeySizeLarge,proto3" json:"StressKeySizeLarge,omitempty"`
	// StressKeySuffixRange is the count of key range written into etcd.
	// Stress keys are created with "fmt.Sprintf("foo%016x", rand.Intn(keySuffixRange)".
	StressKeySuffixRange int32 `protobuf:"varint,203,opt,name=StressKeySuffixRange,proto3" json:"StressKeySuffixRange,omitempty"`
	// StressKeySuffixRangeTxn is the count of key range written into etcd txn (max 100).
	// Stress keys are created with "fmt.Sprintf("/k%03d", i)".
	StressKeySuffixRangeTxn int32 `protobuf:"varint,204,opt,name=StressKeySuffixRangeTxn,proto3" json:"StressKeySuffixRangeTxn,omitempty"`
	// StressKeyTxnOps is the number of operations per a transaction (max 64).
	StressKeyTxnOps int32 `protobuf:"varint,205,opt,name=StressKeyTxnOps,proto3" json:"StressKeyTxnOps,omitempty"`
	// StressClients is the number of concurrent stressing clients
	// with "one" shared TCP connection.
	StressClients int32 `protobuf:"varint,301,opt,name=StressClients,proto3" json:"StressClients,omitempty"`
	// StressQPS is the maximum number of stresser requests per second.
	StressQPS int32 `protobuf:"varint,302,opt,name=StressQPS,proto3" json:"StressQPS,omitempty"`
}

func (x *Tester) Reset() {
	*x = Tester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tester) ProtoMessage() {}

func (x *Tester) ProtoReflect() protoreflect.Message {
	mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tester.ProtoReflect.Descriptor instead.
func (*Tester) Descriptor() ([]byte, []int) {
	return file_tests_functional_rpcpb_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *Tester) GetDataDir() string {
	if x != nil {
		return x.DataDir
	}
	return ""
}

func (x *Tester) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Tester) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Tester) GetDelayLatencyMs() uint32 {
	if x != nil {
		return x.DelayLatencyMs
	}
	return 0
}

func (x *Tester) GetDelayLatencyMsRv() uint32 {
	if x != nil {
		return x.DelayLatencyMsRv
	}
	return 0
}

func (x *Tester) GetUpdatedDelayLatencyMs() uint32 {
	if x != nil {
		return x.UpdatedDelayLatencyMs
	}
	return 0
}

func (x *Tester) GetRoundLimit() int32 {
	if x != nil {
		return x.RoundLimit
	}
	return 0
}

func (x *Tester) GetExitOnCaseFail() bool {
	if x != nil {
		return x.ExitOnCaseFail
	}
	return false
}

func (x *Tester) GetEnablePprof() bool {
	if x != nil {
		return x.EnablePprof
	}
	return false
}

func (x *Tester) GetCaseDelayMs() uint32 {
	if x != nil {
		return x.CaseDelayMs
	}
	return 0
}

func (x *Tester) GetCaseShuffle() bool {
	if x != nil {
		return x.CaseShuffle
	}
	return false
}

func (x *Tester) GetCases() []string {
	if x != nil {
		return x.Cases
	}
	return nil
}

func (x *Tester) GetFailpointCommands() []string {
	if x != nil {
		return x.FailpointCommands
	}
	return nil
}

func (x *Tester) GetRunnerExecPath() string {
	if x != nil {
		return x.RunnerExecPath
	}
	return ""
}

func (x *Tester) GetExternalExecPath() string {
	if x != nil {
		return x.ExternalExecPath
	}
	return ""
}

func (x *Tester) GetStressers() []*Stresser {
	if x != nil {
		return x.Stressers
	}
	return nil
}

func (x *Tester) GetCheckers() []string {
	if x != nil {
		return x.Checkers
	}
	return nil
}

func (x *Tester) GetStressKeySize() int32 {
	if x != nil {
		return x.StressKeySize
	}
	return 0
}

func (x *Tester) GetStressKeySizeLarge() int32 {
	if x != nil {
		return x.StressKeySizeLarge
	}
	return 0
}

func (x *Tester) GetStressKeySuffixRange() int32 {
	if x != nil {
		return x.StressKeySuffixRange
	}
	return 0
}

func (x *Tester) GetStressKeySuffixRangeTxn() int32 {
	if x != nil {
		return x.StressKeySuffixRangeTxn
	}
	return 0
}

func (x *Tester) GetStressKeyTxnOps() int32 {
	if x != nil {
		return x.StressKeyTxnOps
	}
	return 0
}

func (x *Tester) GetStressClients() int32 {
	if x != nil {
		return x.StressClients
	}
	return 0
}

func (x *Tester) GetStressQPS() int32 {
	if x != nil {
		return x.StressQPS
	}
	return 0
}

type Stresser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string  `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Weight float64 `protobuf:"fixed64,2,opt,name=Weight,proto3" json:"Weight,omitempty"`
}

func (x *Stresser) Reset() {
	*x = Stresser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stresser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stresser) ProtoMessage() {}

func (x *Stresser) ProtoReflect() protoreflect.Message {
	mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stresser.ProtoReflect.Descriptor instead.
func (*Stresser) Descriptor() ([]byte, []int) {
	return file_tests_functional_rpcpb_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *Stresser) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Stresser) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type Etcd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	DataDir string `protobuf:"bytes,2,opt,name=DataDir,proto3" json:"DataDir,omitempty"`
	WALDir  string `protobuf:"bytes,3,opt,name=WALDir,proto3" json:"WALDir,omitempty"`
	// HeartbeatIntervalMs is the time (in milliseconds) of a heartbeat interval.
	// Default value is 100, which is 100ms.
	HeartbeatIntervalMs int64 `protobuf:"varint,11,opt,name=HeartbeatIntervalMs,proto3" json:"HeartbeatIntervalMs,omitempty"`
	// ElectionTimeoutMs is the time (in milliseconds) for an election to timeout.
	// Default value is 1000, which is 1s.
	ElectionTimeoutMs   int64    `protobuf:"varint,12,opt,name=ElectionTimeoutMs,proto3" json:"ElectionTimeoutMs,omitempty"`
	ListenClientURLs    []string `protobuf:"bytes,21,rep,name=ListenClientURLs,proto3" json:"ListenClientURLs,omitempty"`
	AdvertiseClientURLs []string `protobuf:"bytes,22,rep,name=AdvertiseClientURLs,proto3" json:"AdvertiseClientURLs,omitempty"`
	ClientAutoTLS       bool     `protobuf:"varint,23,opt,name=ClientAutoTLS,proto3" json:"ClientAutoTLS,omitempty"`
	ClientCertAuth      bool     `protobuf:"varint,24,opt,name=ClientCertAuth,proto3" json:"ClientCertAuth,omitempty"`
	ClientCertFile      string   `protobuf:"bytes,25,opt,name=ClientCertFile,proto3" json:"ClientCertFile,omitempty"`
	ClientKeyFile       string   `protobuf:"bytes,26,opt,name=ClientKeyFile,proto3" json:"ClientKeyFile,omitempty"`
	ClientTrustedCAFile string   `protobuf:"bytes,27,opt,name=ClientTrustedCAFile,proto3" json:"ClientTrustedCAFile,omitempty"`
	ListenPeerURLs      []string `protobuf:"bytes,31,rep,name=ListenPeerURLs,proto3" json:"ListenPeerURLs,omitempty"`
	AdvertisePeerURLs   []string `protobuf:"bytes,32,rep,name=AdvertisePeerURLs,proto3" json:"AdvertisePeerURLs,omitempty"`
	PeerAutoTLS         bool     `protobuf:"varint,33,opt,name=PeerAutoTLS,proto3" json:"PeerAutoTLS,omitempty"`
	PeerClientCertAuth  bool     `protobuf:"varint,34,opt,name=PeerClientCertAuth,proto3" json:"PeerClientCertAuth,omitempty"`
	PeerCertFile        string   `protobuf:"bytes,35,opt,name=PeerCertFile,proto3" json:"PeerCertFile,omitempty"`
	PeerKeyFile         string   `protobuf:"bytes,36,opt,name=PeerKeyFile,proto3" json:"PeerKeyFile,omitempty"`
	PeerTrustedCAFile   string   `protobuf:"bytes,37,opt,name=PeerTrustedCAFile,proto3" json:"PeerTrustedCAFile,omitempty"`
	InitialCluster      string   `protobuf:"bytes,41,opt,name=InitialCluster,proto3" json:"InitialCluster,omitempty"`
	InitialClusterState string   `protobuf:"bytes,42,opt,name=InitialClusterState,proto3" json:"InitialClusterState,omitempty"`
	InitialClusterToken string   `protobuf:"bytes,43,opt,name=InitialClusterToken,proto3" json:"InitialClusterToken,omitempty"`
	SnapshotCount       int64    `protobuf:"varint,51,opt,name=SnapshotCount,proto3" json:"SnapshotCount,omitempty"`
	QuotaBackendBytes   int64    `protobuf:"varint,52,opt,name=QuotaBackendBytes,proto3" json:"QuotaBackendBytes,omitempty"`
	PreVote             bool     `protobuf:"varint,63,opt,name=PreVote,proto3" json:"PreVote,omitempty"`
	InitialCorruptCheck bool     `protobuf:"varint,64,opt,name=InitialCorruptCheck,proto3" json:"InitialCorruptCheck,omitempty"`
	Logger              string   `protobuf:"bytes,71,opt,name=Logger,proto3" json:"Logger,omitempty"`
	// LogOutputs is the log file to store current etcd server logs.
	LogOutputs         []string `protobuf:"bytes,72,rep,name=LogOutputs,proto3" json:"LogOutputs,omitempty"`
	LogLevel           string   `protobuf:"bytes,73,opt,name=LogLevel,proto3" json:"LogLevel,omitempty"`
	SocketReuseAddress bool     `protobuf:"varint,81,opt,name=SocketReuseAddress,proto3" json:"SocketReuseAddress,omitempty"`
	SocketReusePort    bool     `protobuf:"varint,82,opt,name=SocketReusePort,proto3" json:"SocketReusePort,omitempty"`
}

func (x *Etcd) Reset() {
	*x = Etcd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Etcd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Etcd) ProtoMessage() {}

func (x *Etcd) ProtoReflect() protoreflect.Message {
	mi := &file_tests_functional_rpcpb_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Etcd.ProtoReflect.Descriptor instead.
func (*Etcd) Descriptor() ([]byte, []int) {
	return file_tests_functional_rpcpb_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *Etcd) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Etcd) GetDataDir() string {
	if x != nil {
		return x.DataDir
	}
	return ""
}

func (x *Etcd) GetWALDir() string {
	if x != nil {
		return x.WALDir
	}
	return ""
}

func (x *Etcd) GetHeartbeatIntervalMs() int64 {
	if x != nil {
		return x.HeartbeatIntervalMs
	}
	return 0
}

func (x *Etcd) GetElectionTimeoutMs() int64 {
	if x != nil {
		return x.ElectionTimeoutMs
	}
	return 0
}

func (x *Etcd) GetListenClientURLs() []string {
	if x != nil {
		return x.ListenClientURLs
	}
	return nil
}

func (x *Etcd) GetAdvertiseClientURLs() []string {
	if x != nil {
		return x.AdvertiseClientURLs
	}
	return nil
}

func (x *Etcd) GetClientAutoTLS() bool {
	if x != nil {
		return x.ClientAutoTLS
	}
	return false
}

func (x *Etcd) GetClientCertAuth() bool {
	if x != nil {
		return x.ClientCertAuth
	}
	return false
}

func (x *Etcd) GetClientCertFile() string {
	if x != nil {
		return x.ClientCertFile
	}
	return ""
}

func (x *Etcd) GetClientKeyFile() string {
	if x != nil {
		return x.ClientKeyFile
	}
	return ""
}

func (x *Etcd) GetClientTrustedCAFile() string {
	if x != nil {
		return x.ClientTrustedCAFile
	}
	return ""
}

func (x *Etcd) GetListenPeerURLs() []string {
	if x != nil {
		return x.ListenPeerURLs
	}
	return nil
}

func (x *Etcd) GetAdvertisePeerURLs() []string {
	if x != nil {
		return x.AdvertisePeerURLs
	}
	return nil
}

func (x *Etcd) GetPeerAutoTLS() bool {
	if x != nil {
		return x.PeerAutoTLS
	}
	return false
}

func (x *Etcd) GetPeerClientCertAuth() bool {
	if x != nil {
		return x.PeerClientCertAuth
	}
	return false
}

func (x *Etcd) GetPeerCertFile() string {
	if x != nil {
		return x.PeerCertFile
	}
	return ""
}

func (x *Etcd) GetPeerKeyFile() string {
	if x != nil {
		return x.PeerKeyFile
	}
	return ""
}

func (x *Etcd) GetPeerTrustedCAFile() string {
	if x != nil {
		return x.PeerTrustedCAFile
	}
	return ""
}

func (x *Etcd) GetInitialCluster() string {
	if x != nil {
		return x.InitialCluster
	}
	return ""
}

func (x *Etcd) GetInitialClusterState() string {
	if x != nil {
		return x.InitialClusterState
	}
	return ""
}

func (x *Etcd) GetInitialClusterToken() string {
	if x != nil {
		return x.InitialClusterToken
	}
	return ""
}

func (x *Etcd) GetSnapshotCount() int64 {
	if x != nil {
		return x.SnapshotCount
	}
	return 0
}

func (x *Etcd) GetQuotaBackendBytes() int64 {
	if x != nil {
		return x.QuotaBackendBytes
	}
	return 0
}

func (x *Etcd) GetPreVote() bool {
	if x != nil {
		return x.PreVote
	}
	return false
}

func (x *Etcd) GetInitialCorruptCheck() bool {
	if x != nil {
		return x.InitialCorruptCheck
	}
	return false
}

func (x *Etcd) GetLogger() string {
	if x != nil {
		return x.Logger
	}
	return ""
}

func (x *Etcd) GetLogOutputs() []string {
	if x != nil {
		return x.LogOutputs
	}
	return nil
}

func (x *Etcd) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *Etcd) GetSocketReuseAddress() bool {
	if x != nil {
		return x.SocketReuseAddress
	}
	return false
}

func (x *Etcd) GetSocketReusePort() bool {
	if x != nil {
		return x.SocketReusePort
	}
	return false
}

var File_tests_functional_rpcpb_rpc_proto protoreflect.FileDescriptor

var file_tests_functional_rpcpb_rpc_proto_rawDesc = []byte{
	0x0a, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x2f, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x72, 0x70, 0x63, 0x70, 0x62, 0x22, 0x87, 0x01, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x06,
	0x54, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x54, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x22, 0x82, 0x03, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a,
	0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f,
	0x6f, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x6f, 0x6f, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe7, 0x07, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x74, 0x63, 0x64, 0x45, 0x78, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x74, 0x63, 0x64, 0x45, 0x78, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2c, 0x0a, 0x11,
	0x46, 0x61, 0x69, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x54, 0x54, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x46, 0x61, 0x69, 0x6c, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x48, 0x54, 0x54, 0x50, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x69, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x61, 0x73,
	0x65, 0x44, 0x69, 0x72, 0x12, 0x29, 0x0a, 0x0f, 0x45, 0x74, 0x63, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x45, 0x74, 0x63, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x25, 0x0a, 0x0d, 0x45, 0x74, 0x63, 0x64, 0x50, 0x65, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x45, 0x74, 0x63, 0x64, 0x50, 0x65, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x2f, 0x0a, 0x12, 0x45, 0x74, 0x63, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xad, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x45, 0x74, 0x63, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x45, 0x74, 0x63, 0x64, 0x18,
	0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x45,
	0x74, 0x63, 0x64, 0x52, 0x04, 0x45, 0x74, 0x63, 0x64, 0x12, 0x42, 0x0a, 0x15, 0x45, 0x74, 0x63,
	0x64, 0x4f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x45, 0x74, 0x63, 0x64, 0x52, 0x15, 0x45, 0x74, 0x63, 0x64, 0x4f, 0x6e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a,
	0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x91, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x25, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x93, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x18, 0x94, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x31, 0x0a,
	0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x41,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x95, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x31, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x43, 0x41, 0x50, 0x61, 0x74, 0x68, 0x18, 0x96, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x41, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0c, 0x50, 0x65, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0xf5, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x65, 0x65, 0x72,
	0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0c, 0x50, 0x65, 0x65, 0x72,
	0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0xf6, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x50, 0x65, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a,
	0x0b, 0x50, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0xf7, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x18,
	0xf8, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x11, 0x50, 0x65, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x18, 0xf9, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x50, 0x65, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x41, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2d, 0x0a, 0x11, 0x50, 0x65, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x43, 0x41, 0x50, 0x61, 0x74, 0x68, 0x18, 0xfa, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x50, 0x65, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x41, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x23, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x18, 0xd9, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xda, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0xbd,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0xa4, 0x07, 0x0a, 0x06, 0x54, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x52, 0x76,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x52, 0x76, 0x12, 0x34, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x45, 0x78, 0x69, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x46, 0x61, 0x69, 0x6c,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x45, 0x78, 0x69, 0x74, 0x4f, 0x6e, 0x43, 0x61,
	0x73, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x70, 0x72, 0x6f, 0x66, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x70, 0x72, 0x6f, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x73, 0x65,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43,
	0x61, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61,
	0x73, 0x65, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x43, 0x61, 0x73, 0x65, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x43, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x61, 0x69, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x46,
	0x61, 0x69, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x52, 0x09, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18,
	0x66, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x18, 0xca, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0xcb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x17,
	0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x6e, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x6e, 0x12, 0x29, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x54, 0x78, 0x6e, 0x4f, 0x70, 0x73, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x54, 0x78, 0x6e, 0x4f,
	0x70, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x74, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x74, 0x72,
	0x65, 0x73, 0x73, 0x51, 0x50, 0x53, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53,
	0x74, 0x72, 0x65, 0x73, 0x73, 0x51, 0x50, 0x53, 0x22, 0x36, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xce, 0x09, 0x0a, 0x04, 0x45, 0x74, 0x63, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x41, 0x4c, 0x44, 0x69,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x57, 0x41, 0x4c, 0x44, 0x69, 0x72, 0x12,
	0x30, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x52, 0x4c, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x52,
	0x4c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x4c, 0x53, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x6f,
	0x54, 0x4c, 0x53, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x41, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x41, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x55,
	0x52, 0x4c, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x50, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x4c, 0x53,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f,
	0x54, 0x4c, 0x53, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x65, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x65, 0x65, 0x72, 0x43,
	0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x65,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x65, 0x65,
	0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x41, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x65, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x43, 0x41, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x56, 0x6f,
	0x74, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x65, 0x56, 0x6f, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x4c,
	0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x48, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x4c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x75, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x51, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x75, 0x73, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x2a, 0xfe, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x56, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x53,
	0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x56, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x56,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x4b, 0x56, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x4f, 0x4e, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x56, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x05, 0x12, 0x17,
	0x0a, 0x13, 0x4b, 0x56, 0x5f, 0x54, 0x58, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x45, 0x41, 0x53, 0x45,
	0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x29,
	0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52,
	0x10, 0x33, 0x2a, 0x5e, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x0b, 0x0a,
	0x07, 0x4b, 0x56, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45,
	0x41, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f,
	0x54, 0x54, 0x4c, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x10, 0x04, 0x2a, 0x99, 0x03, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x45, 0x54, 0x43, 0x44, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x54, 0x43, 0x44, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x49, 0x47, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x45, 0x54, 0x43, 0x44, 0x10, 0x14, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x49, 0x47, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x45, 0x54, 0x43, 0x44, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x15, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x10, 0x1e, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x10, 0x1f, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x20,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x49, 0x47, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x45, 0x54, 0x43, 0x44,
	0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x10, 0x28, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x49, 0x47, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x45,
	0x54, 0x43, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x10, 0x29, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x48, 0x4f, 0x4c,
	0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52,
	0x58, 0x10, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4e, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x48, 0x4f,
	0x4c, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f,
	0x52, 0x58, 0x10, 0x65, 0x12, 0x1a, 0x0a, 0x15, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58, 0x10, 0xc8, 0x01,
	0x12, 0x1c, 0x0a, 0x17, 0x55, 0x4e, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58, 0x10, 0xc9, 0x01, 0x2a, 0x94,
	0x0b, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x49, 0x47, 0x54, 0x45,
	0x52, 0x4d, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x49, 0x47, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x4f, 0x4e, 0x45,
	0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x5f,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x49, 0x47, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x4c, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x49, 0x47, 0x54, 0x45, 0x52,
	0x4d, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x49, 0x47, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x51, 0x55, 0x4f,
	0x52, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x47, 0x54, 0x45, 0x52, 0x4d,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x49, 0x47, 0x51, 0x55, 0x49,
	0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4f, 0x4e, 0x45,
	0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x3a, 0x0a, 0x36, 0x53,
	0x49, 0x47, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x49, 0x47, 0x51, 0x55,
	0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4c, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x49, 0x47, 0x51, 0x55, 0x49,
	0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x0d, 0x12, 0x46, 0x0a, 0x42,
	0x53, 0x49, 0x47, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x43, 0x52, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x0e, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x48, 0x4f, 0x4c,
	0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52,
	0x58, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x64,
	0x12, 0x41, 0x0a, 0x3d, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x4e,
	0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c,
	0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x10, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x48, 0x4f, 0x4c, 0x45,
	0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58,
	0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x66, 0x12, 0x3b, 0x0a, 0x37, 0x42, 0x4c, 0x41,
	0x43, 0x4b, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x54, 0x49, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50,
	0x53, 0x48, 0x4f, 0x54, 0x10, 0x67, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x48,
	0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58,
	0x5f, 0x52, 0x58, 0x5f, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d, 0x10, 0x68, 0x12, 0x21, 0x0a, 0x1d,
	0x42, 0x4c, 0x41, 0x43, 0x4b, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x69, 0x12,
	0x27, 0x0a, 0x22, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x4f, 0x4c,
	0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0xc8, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x52, 0x41, 0x4e, 0x44,
	0x4f, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x4f, 0x4c,
	0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0xc9, 0x01, 0x12, 0x3e, 0x0a, 0x39, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52,
	0x58, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0xca, 0x01, 0x12, 0x45, 0x0a, 0x40, 0x52, 0x41, 0x4e, 0x44,
	0x4f, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x4f, 0x4c,
	0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0xcb, 0x01, 0x12,
	0x21, 0x0a, 0x1c, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10,
	0xcc, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f,
	0x52, 0x58, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0xcd, 0x01, 0x12, 0x38, 0x0a, 0x33,
	0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x54, 0x58, 0x5f, 0x52, 0x58, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x54,
	0x49, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x10, 0xce, 0x01, 0x12, 0x3f, 0x0a, 0x3a, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d,
	0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x54, 0x49, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50,
	0x53, 0x48, 0x4f, 0x54, 0x10, 0xcf, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x44, 0x45, 0x4c, 0x41, 0x59,
	0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58,
	0x5f, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d, 0x10, 0xd0, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x52, 0x41,
	0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58, 0x5f, 0x51, 0x55, 0x4f, 0x52, 0x55,
	0x4d, 0x10, 0xd1, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x58, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0xd2, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x44,
	0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54,
	0x58, 0x5f, 0x52, 0x58, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0xd3, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4e,
	0x4f, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x52, 0x45,
	0x53, 0x53, 0x10, 0xac, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x4e, 0x4f, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x4e, 0x45, 0x53, 0x53, 0x10, 0xad, 0x02, 0x12,
	0x0f, 0x0a, 0x0a, 0x46, 0x41, 0x49, 0x4c, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x90, 0x03,
	0x12, 0x24, 0x0a, 0x1f, 0x46, 0x41, 0x49, 0x4c, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x49, 0x4f, 0x5f, 0x4c, 0x41, 0x54, 0x45,
	0x4e, 0x43, 0x59, 0x10, 0x91, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x10, 0xf4, 0x03, 0x32, 0x3f, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x0e, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x6f, 0x2e, 0x65, 0x74, 0x63,
	0x64, 0x2e, 0x69, 0x6f, 0x2f, 0x65, 0x74, 0x63, 0x64, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_functional_rpcpb_rpc_proto_rawDescOnce sync.Once
	file_tests_functional_rpcpb_rpc_proto_rawDescData = file_tests_functional_rpcpb_rpc_proto_rawDesc
)

func file_tests_functional_rpcpb_rpc_proto_rawDescGZIP() []byte {
	file_tests_functional_rpcpb_rpc_proto_rawDescOnce.Do(func() {
		file_tests_functional_rpcpb_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_functional_rpcpb_rpc_proto_rawDescData)
	})
	return file_tests_functional_rpcpb_rpc_proto_rawDescData
}

var file_tests_functional_rpcpb_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_tests_functional_rpcpb_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tests_functional_rpcpb_rpc_proto_goTypes = []interface{}{
	(StresserType)(0),    // 0: rpcpb.StresserType
	(Checker)(0),         // 1: rpcpb.Checker
	(Operation)(0),       // 2: rpcpb.Operation
	(Case)(0),            // 3: rpcpb.Case
	(*Request)(nil),      // 4: rpcpb.Request
	(*SnapshotInfo)(nil), // 5: rpcpb.SnapshotInfo
	(*Response)(nil),     // 6: rpcpb.Response
	(*Member)(nil),       // 7: rpcpb.Member
	(*Tester)(nil),       // 8: rpcpb.Tester
	(*Stresser)(nil),     // 9: rpcpb.Stresser
	(*Etcd)(nil),         // 10: rpcpb.Etcd
}
var file_tests_functional_rpcpb_rpc_proto_depIdxs = []int32{
	2,  // 0: rpcpb.Request.Operation:type_name -> rpcpb.Operation
	7,  // 1: rpcpb.Request.Member:type_name -> rpcpb.Member
	8,  // 2: rpcpb.Request.Tester:type_name -> rpcpb.Tester
	7,  // 3: rpcpb.Response.Member:type_name -> rpcpb.Member
	5,  // 4: rpcpb.Response.SnapshotInfo:type_name -> rpcpb.SnapshotInfo
	10, // 5: rpcpb.Member.Etcd:type_name -> rpcpb.Etcd
	10, // 6: rpcpb.Member.EtcdOnSnapshotRestore:type_name -> rpcpb.Etcd
	5,  // 7: rpcpb.Member.SnapshotInfo:type_name -> rpcpb.SnapshotInfo
	9,  // 8: rpcpb.Tester.Stressers:type_name -> rpcpb.Stresser
	4,  // 9: rpcpb.Transport.Transport:input_type -> rpcpb.Request
	6,  // 10: rpcpb.Transport.Transport:output_type -> rpcpb.Response
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_tests_functional_rpcpb_rpc_proto_init() }
func file_tests_functional_rpcpb_rpc_proto_init() {
	if File_tests_functional_rpcpb_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tests_functional_rpcpb_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_functional_rpcpb_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_functional_rpcpb_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_functional_rpcpb_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_functional_rpcpb_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_functional_rpcpb_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stresser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_functional_rpcpb_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Etcd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_functional_rpcpb_rpc_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tests_functional_rpcpb_rpc_proto_goTypes,
		DependencyIndexes: file_tests_functional_rpcpb_rpc_proto_depIdxs,
		EnumInfos:         file_tests_functional_rpcpb_rpc_proto_enumTypes,
		MessageInfos:      file_tests_functional_rpcpb_rpc_proto_msgTypes,
	}.Build()
	File_tests_functional_rpcpb_rpc_proto = out.File
	file_tests_functional_rpcpb_rpc_proto_rawDesc = nil
	file_tests_functional_rpcpb_rpc_proto_goTypes = nil
	file_tests_functional_rpcpb_rpc_proto_depIdxs = nil
}
