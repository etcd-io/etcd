// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: namespacequota.proto

/*
	Package namespacequotapb is a generated protocol buffer package.

	It is generated from these files:
		namespacequota.proto

	It has these top-level messages:
		NamespaceQuota
*/
package namespacequotapb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NamespaceQuota struct {
	Key            string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	QuotaByteCount uint64 `protobuf:"varint,2,opt,name=QuotaByteCount,proto3" json:"QuotaByteCount,omitempty"`
	QuotaKeyCount  uint64 `protobuf:"varint,3,opt,name=QuotaKeyCount,proto3" json:"QuotaKeyCount,omitempty"`
	UsageByteCount uint64 `protobuf:"varint,4,opt,name=UsageByteCount,proto3" json:"UsageByteCount,omitempty"`
	UsageKeyCount  uint64 `protobuf:"varint,5,opt,name=UsageKeyCount,proto3" json:"UsageKeyCount,omitempty"`
}

func (m *NamespaceQuota) Reset()                    { *m = NamespaceQuota{} }
func (m *NamespaceQuota) String() string            { return proto.CompactTextString(m) }
func (*NamespaceQuota) ProtoMessage()               {}
func (*NamespaceQuota) Descriptor() ([]byte, []int) { return fileDescriptorNamespacequota, []int{0} }

func init() {
	proto.RegisterType((*NamespaceQuota)(nil), "namespacequotapb.NamespaceQuota")
}
func (m *NamespaceQuota) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceQuota) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNamespacequota(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.QuotaByteCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNamespacequota(dAtA, i, uint64(m.QuotaByteCount))
	}
	if m.QuotaKeyCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNamespacequota(dAtA, i, uint64(m.QuotaKeyCount))
	}
	if m.UsageByteCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNamespacequota(dAtA, i, uint64(m.UsageByteCount))
	}
	if m.UsageKeyCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNamespacequota(dAtA, i, uint64(m.UsageKeyCount))
	}
	return i, nil
}

func encodeVarintNamespacequota(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NamespaceQuota) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovNamespacequota(uint64(l))
	}
	if m.QuotaByteCount != 0 {
		n += 1 + sovNamespacequota(uint64(m.QuotaByteCount))
	}
	if m.QuotaKeyCount != 0 {
		n += 1 + sovNamespacequota(uint64(m.QuotaKeyCount))
	}
	if m.UsageByteCount != 0 {
		n += 1 + sovNamespacequota(uint64(m.UsageByteCount))
	}
	if m.UsageKeyCount != 0 {
		n += 1 + sovNamespacequota(uint64(m.UsageKeyCount))
	}
	return n
}

func sovNamespacequota(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNamespacequota(x uint64) (n int) {
	return sovNamespacequota(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NamespaceQuota) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespacequota
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceQuota: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceQuota: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamespacequota
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotaByteCount", wireType)
			}
			m.QuotaByteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuotaByteCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotaKeyCount", wireType)
			}
			m.QuotaKeyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuotaKeyCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageByteCount", wireType)
			}
			m.UsageByteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageByteCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageKeyCount", wireType)
			}
			m.UsageKeyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageKeyCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamespacequota(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespacequota
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNamespacequota(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNamespacequota
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespacequota
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNamespacequota
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNamespacequota
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNamespacequota(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNamespacequota = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNamespacequota   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("namespacequota.proto", fileDescriptorNamespacequota) }

var fileDescriptorNamespacequota = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4b, 0xcc, 0x4d,
	0x2d, 0x2e, 0x48, 0x4c, 0x4e, 0x2d, 0x2c, 0xcd, 0x2f, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0x40, 0x15, 0x2d, 0x48, 0x92, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x4b, 0xea, 0x83,
	0x58, 0x10, 0x75, 0x4a, 0xfb, 0x18, 0xb9, 0xf8, 0xfc, 0x60, 0x4a, 0x03, 0x41, 0x4a, 0x85, 0x04,
	0xb8, 0x98, 0xbd, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x21, 0x35,
	0x2e, 0x3e, 0xb0, 0x94, 0x53, 0x65, 0x49, 0xaa, 0x73, 0x7e, 0x69, 0x5e, 0x89, 0x04, 0x93, 0x02,
	0xa3, 0x06, 0x4b, 0x10, 0x9a, 0xa8, 0x90, 0x0a, 0x17, 0x2f, 0x58, 0xc4, 0x3b, 0xb5, 0x12, 0xa2,
	0x8c, 0x19, 0xac, 0x0c, 0x55, 0x10, 0x64, 0x5a, 0x68, 0x71, 0x62, 0x7a, 0x2a, 0xc2, 0x34, 0x16,
	0x88, 0x69, 0xa8, 0xa2, 0x20, 0xd3, 0xc0, 0x22, 0x70, 0xd3, 0x58, 0x21, 0xa6, 0xa1, 0x08, 0x3a,
	0x49, 0x9c, 0x78, 0x28, 0xc7, 0x70, 0xe1, 0xa1, 0x1c, 0xc3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e,
	0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0xd8, 0x87, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90, 0x5b, 0xc1, 0x8a, 0x21, 0x01, 0x00, 0x00,
}
